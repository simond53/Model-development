import unittest
from generate_payload import generate_dict_payload, input_values


class TestStringMethods(unittest.TestCase):

    def test_input_values_same_number_keys(self):

        # generate_dict_payload() we don't to use the function, only test one thing at a time
        payload = {'bedrooms': 3.0, 'bathrooms': 1.0, 'sqft_living': 1180.0, 'sqft_lot': 5650.0, 'floors': 1.0, 'waterfront': 0.0, 'view': 0.0, 'condition': 3.0, 'grade': 7.0, 'sqft_above': 1180.0, 'sqft_basement': 0.0, 'yr_built': 1955.0, 'yr_renovated': 0.0, 'lat': 47.5112, 'long': -122.257, 'sqft_living15': 1340.0, 'sqft_lot15': 5650.0, '98001': 0.0, '98002': 0.0, '98003': 0.0, '98004': 0.0, '98005': 0.0, '98006': 0.0, '98007': 0.0, '98008': 0.0, '98010': 0.0, '98011': 0.0, '98014': 0.0, '98019': 0.0, '98022': 0.0, '98023': 0.0, '98024': 0.0, '98027': 0.0, '98028': 0.0, '98029': 0.0, '98030': 0.0, '98031': 0.0, '98032': 0.0, '98033': 0.0, '98034': 0.0, '98038': 0.0, '98039': 0.0, '98040': 0.0, '98042': 0.0, '98045': 0.0, '98052': 0.0, '98053': 0.0, '98055': 0.0, '98056': 0.0, '98058': 0.0, '98059': 0.0, '98065': 0.0, '98070': 0.0, '98072': 0.0, '98074': 0.0, '98075': 0.0, '98077': 0.0, '98092': 0.0, '98102': 0.0, '98103': 0.0, '98105': 0.0, '98106': 0.0, '98107': 0.0, '98108': 0.0, '98109': 0.0, '98112': 0.0, '98115': 0.0, '98116': 0.0, '98117': 0.0, '98118': 0.0, '98119': 0.0, '98122': 0.0, '98125': 0.0, '98126': 0.0, '98133': 0.0, '98136': 0.0, '98144': 0.0, '98146': 0.0, '98148': 0.0, '98155': 0.0, '98166': 0.0, '98168': 0.0, '98177': 0.0, 
                    '98178': 0.0, '98188': 0.0, '98198': 0.0, '98199': 0.0}

        zip_code = "703030"
        # actual function we're testing
        new_payload = input_values(payload, zip_code)
        self.assertEqual(new_payload, payload)

    def test_input_values_input_works(self):

        # generate_dict_payload() we don't to use the function, only test one thing at a time
        payload = {'bedrooms': 3.0, 'bathrooms': 1.0, 'sqft_living': 1180.0, 'sqft_lot': 5650.0, 'floors': 1.0, 'waterfront': 0.0, 'view': 0.0, 'condition': 3.0, 'grade': 7.0, 'sqft_above': 1180.0, 'sqft_basement': 0.0, 'yr_built': 1955.0, 'yr_renovated': 0.0, 'lat': 47.5112, 'long': -122.257, 'sqft_living15': 1340.0, 'sqft_lot15': 5650.0, '98001': 0.0, '98002': 0.0, '98003': 0.0, '98004': 0.0, '98005': 0.0, '98006': 0.0, '98007': 0.0, '98008': 0.0, '98010': 0.0, '98011': 0.0, '98014': 0.0, '98019': 0.0, '98022': 0.0, '98023': 0.0, '98024': 0.0, '98027': 0.0, '98028': 0.0, '98029': 0.0, '98030': 0.0, '98031': 0.0, '98032': 0.0, '98033': 0.0, '98034': 0.0, '98038': 0.0, '98039': 0.0, '98040': 0.0, '98042': 0.0, '98045': 0.0, '98052': 0.0, '98053': 0.0, '98055': 0.0, '98056': 0.0, '98058': 0.0, '98059': 0.0, '98065': 0.0, '98070': 0.0, '98072': 0.0, '98074': 0.0, '98075': 0.0, '98077': 0.0, '98092': 0.0, '98102': 0.0, '98103': 0.0, '98105': 0.0, '98106': 0.0, '98107': 0.0, '98108': 0.0, '98109': 0.0, '98112': 0.0, '98115': 0.0, '98116': 0.0, '98117': 0.0, '98118': 0.0, '98119': 0.0, '98122': 0.0, '98125': 0.0, '98126': 0.0, '98133': 0.0, '98136': 0.0, '98144': 0.0, '98146': 0.0, '98148': 0.0, '98155': 0.0, '98166': 0.0, '98168': 0.0, '98177': 0.0, 
                    '98178': 0.0, '98188': 0.0, '98198': 0.0, '98199': 0.0}

        zip_code = "98178"
        # actual function we're testing
        new_payload = input_values(payload, zip_code)
        self.assertEqual(new_payload[zip_code], 1.0)

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

if __name__ == '__main__':
    unittest.main()